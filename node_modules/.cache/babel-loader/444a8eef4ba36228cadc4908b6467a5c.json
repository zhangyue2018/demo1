{"ast":null,"code":"import _classCallCheck from \"/home/zhangyue/test/demo1/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/zhangyue/test/demo1/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/zhangyue/test/demo1/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/zhangyue/test/demo1/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/zhangyue/test/demo1/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/zhangyue/test/demo1/src/components/image-section/ImageSection.js\";\nimport React, { Component } from \"react\";\nimport ImageFigure from \"./ImageFigure\";\nimport styles from './style/style.module.scss';\nvar centerPos = {\n  left: 0,\n  top: 0\n},\n    hPosRange = {\n  leftSecX: [0, 0],\n  //在舞台的左侧水平方向，图片的left的取值范围，leftSecX[0]是最左端，leftSecX[1]是最右端，初始都为0\n  rightSecX: [0, 0],\n  //在舞台的右侧水平方向，图片的left的取值范围，rightSecX[0]是最左端，rightSecX[1]是最右端，初始都为0\n  secY: [0, 0] //在舞台左右两侧区域的垂直方向上，图片的top的取值范围，secY[0],是最上端，secY[1]是最下端，初始都为0\n\n},\n    vPosRange = {\n  secX: [0, 0],\n  //在舞台的中间上部区域，图片在水平方向上的left的取值范围\n  topsecY: [0, 0] //在舞台的中间上部区域，图片在垂直方向上的top的取值范围\n\n};\n\nvar ImageSection =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ImageSection, _Component);\n\n  function ImageSection(props) {\n    var _this;\n\n    _classCallCheck(this, ImageSection);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ImageSection).call(this, props));\n\n    _this.calcLayout = function (stageSize) {\n      //const stageSize = this.props.stageSize;\n      var imgSize = _this.getImageSize(); //计算中心图片的位置点\n\n\n      centerPos = {\n        left: stageSize.halfStageW - imgSize.halfImgW,\n        top: stageSize.halfStageH - imgSize.halfImgH\n      }; //左侧区域left取值范围\n\n      hPosRange.leftSecX[0] = -imgSize.halfImgW;\n      hPosRange.leftSecX[1] = stageSize.halfStageW - imgSize.halfImgW * 3; //右侧区域left取值范围\n\n      hPosRange.rightSecX[0] = stageSize.halfStageW + imgSize.halfImgW;\n      hPosRange.rightSecX[1] = stageSize.stageW - imgSize.halfImgW; //左右侧区域的top取值范围\n\n      hPosRange.secY[0] = -imgSize.halfImgH;\n      hPosRange.secY[1] = stageSize.stageH - imgSize.halfImgH; //中间上部区域的left取值范围\n\n      vPosRange.secX[0] = stageSize.halfStageW - imgSize.imgW;\n      vPosRange.secX[1] = stageSize.halfStageW; //中间上部区域的top的取值范围\n\n      vPosRange.topsecY[0] = -imgSize.halfImgH;\n      vPosRange.topsecY[1] = stageSize.halfStageH - imgSize.halfImgH * 3;\n    };\n\n    _this.setImgFigureEle = function (para, element) {\n      _this[para] = element;\n    };\n\n    _this.getImageSize = function () {\n      var imgFigDOM = _this[\"imgFig0\"];\n      var imgW = imgFigDOM.scrollWidth,\n          imgH = imgFigDOM.scrollHeight,\n          halfImgW = Math.ceil(imgW / 2),\n          halfImgH = Math.ceil(imgH / 2);\n      return {\n        imgW: imgW,\n        imgH: imgH,\n        halfImgW: halfImgW,\n        halfImgH: halfImgH\n      };\n    };\n\n    _this.getRangeRandom = function (low, high) {\n      return Math.ceil(Math.random() * (high - low) + low);\n    };\n\n    _this.get30DegRandom = function () {\n      return (Math.random() > 0.5 ? \"\" : \"-\") + Math.ceil(Math.random() * 30);\n    };\n\n    _this.reArrange = function (centerIndex) {\n      var imgArrangeArr = _this.state.imgArrangeArr,\n          hPosRangeLeftSecX = hPosRange.leftSecX,\n          hPosRangeRightSecX = hPosRange.rightSecX,\n          hPosRangeSecY = hPosRange.secY,\n          vPosRangeSecX = vPosRange.secX,\n          vPosRangeTopSecY = vPosRange.topsecY,\n          //imgArrangeTopArr存放上部图片的信息\n      //topImgNum上部图片放0个或者1个\n      //topImgSpliceIndex被放到上方的图片的index\n      imgArrangeTopArr = [],\n          topImgNum = Math.floor(Math.random() * 2),\n          topImgSpliceIndex = 0,\n          //选取中心图片\n      imgArrangeCenterArr = imgArrangeArr.splice(centerIndex, 1);\n      _this.centerIndex = centerIndex; //居中centerIndex的图片不需要旋转,isCenter设为true\n\n      imgArrangeCenterArr[0].pos = centerPos;\n      imgArrangeCenterArr[0].rotate = 0;\n      imgArrangeCenterArr[0].isCenter = true;\n      imgArrangeCenterArr[0].isInverse = false; //取出上部图片的状态信息\n\n      topImgSpliceIndex = Math.floor(Math.random() * imgArrangeArr.length);\n      imgArrangeTopArr = imgArrangeArr.splice(topImgSpliceIndex, topImgNum); //布局上部的图片\n\n      imgArrangeTopArr.forEach(function (value, index) {\n        imgArrangeTopArr[index].pos = {\n          left: _this.getRangeRandom(vPosRangeSecX[0], vPosRangeSecX[1]),\n          top: _this.getRangeRandom(vPosRangeTopSecY[0], vPosRangeTopSecY[1])\n        };\n        imgArrangeTopArr[index].rotate = _this.get30DegRandom();\n        imgArrangeTopArr[index].isCenter = false;\n        imgArrangeTopArr[index].isInverse = false;\n      }); //布局左右两侧的图片\n\n      for (var i = 0, j = imgArrangeArr.length, k = j / 2; i < j; i++) {\n        var hPosRangeLORX = null; //前半部分布局左边，右半部分布局右边\n\n        if (i < k) {\n          hPosRangeLORX = hPosRangeLeftSecX;\n        } else {\n          hPosRangeLORX = hPosRangeRightSecX;\n        }\n\n        imgArrangeArr[i].pos = {\n          top: _this.getRangeRandom(hPosRangeSecY[0], hPosRangeSecY[1]),\n          left: _this.getRangeRandom(hPosRangeLORX[0], hPosRangeLORX[1])\n        };\n        imgArrangeArr[i].rotate = _this.get30DegRandom();\n        imgArrangeArr[i].isCenter = false;\n        imgArrangeArr[i].isInverse = false;\n      } //将取出的中心图片和上部图片再重新插入到图片数组中\n\n\n      if (imgArrangeTopArr && imgArrangeTopArr[0]) {\n        imgArrangeArr.splice(topImgSpliceIndex, 0, imgArrangeTopArr[0]);\n      }\n\n      imgArrangeArr.splice(centerIndex, 0, imgArrangeCenterArr[0]);\n\n      _this.setState({\n        imgArrangeArr: imgArrangeArr\n      });\n    };\n\n    _this.doCenter = function (index) {\n      return function () {\n        _this.props.handleClick({\n          name: 'center',\n          clickIndex: index,\n          isCenter: true,\n          isInverse: false\n        });\n      };\n    };\n\n    _this.doInverse = function (index) {\n      return function () {\n        var tempImgArrangeArr = _this.state.imgArrangeArr;\n        var imgInfo = Object.assign({}, tempImgArrangeArr[index]);\n\n        _this.props.handleClick({\n          name: 'inverse',\n          clickIndex: index,\n          isCenter: true,\n          isInverse: !imgInfo.isInverse\n        });\n      };\n    };\n\n    _this.state = {\n      //存放图片的状态信息，包括图片位置,旋转角度,图片正反面,图片是否处于中心位置\n      imgArrangeArr: props.imageDatas.map(function (value, index) {\n        return {\n          pos: {\n            left: 0,\n            top: 0\n          },\n          rotate: 0,\n          isInverse: false,\n          isCenter: false\n        };\n      }),\n      imageDatas: props.imageDatas\n    };\n    _this.centerIndex = 0;\n    return _this;\n  }\n\n  _createClass(ImageSection, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          imageDatas = _this$props.imageDatas,\n          stageSize = _this$props.stageSize;\n      Promise.all(imageDatas.map(function (value, index) {\n        return import(\"../../images/\" + value.fileName).then(function (fullName) {\n          value.imageURL = fullName.default;\n          return value;\n        });\n      })).then(function (imageDatasArr) {\n        _this2.setState({\n          imageDatas: imageDatasArr\n        });\n      });\n      this.calcLayout(stageSize);\n      this.reArrange(this.centerIndex);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var stageSize = nextProps.stageSize,\n          clickInfo = nextProps.clickInfo;\n      var preStageSize = this.props.stageSize,\n          preClickInfo = this.props.clickInfo;\n      var imgArrangeArr = this.state.imgArrangeArr;\n\n      if (preStageSize.stageH !== stageSize.stageH || preStageSize.stageW !== stageSize.stageW) {\n        this.calcLayout(stageSize); //这种情况下，处于中心位置位置的图片状态保持不变\n\n        var tempImgInfo = Object.assign({}, imgArrangeArr[clickInfo.clickIndex]);\n        this.reArrange(this.centerIndex);\n        imgArrangeArr[clickInfo.clickIndex].isInverse = tempImgInfo.isInverse;\n        this.setState({\n          imgArrangeArr: imgArrangeArr\n        });\n      } //当点击中心图片以外的图片或者改变window的size时\n\n\n      if (clickInfo.name === \"center\") {\n        //仅当点击中心图片以外的图片\n        if (clickInfo.clickIndex !== preClickInfo.clickIndex) {\n          this.reArrange(clickInfo.clickIndex);\n        }\n      } else if (clickInfo.name === \"inverse\") {\n        //当点击中心图片进行翻转或者改变window的size时\n        //仅当点击中心图片进行翻转时\n        if (clickInfo.isInverse !== preClickInfo.isInverse) {\n          //this.doInverse(clickInfo.clickIndex);\n          var _tempImgInfo = Object.assign({}, imgArrangeArr[clickInfo.clickIndex]);\n\n          imgArrangeArr[clickInfo.clickIndex].isInverse = !_tempImgInfo.isInverse;\n          this.setState({\n            imgArrangeArr: imgArrangeArr\n          });\n        }\n      }\n    } //计算布局\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var imgArrangeArr = this.state.imgArrangeArr;\n      var imageDatas = this.props.imageDatas;\n      var imageFigures = []; //styleRef是获得每个figure的style引用，因为浏览器不支持用js代码直接对style[transform]进行更改，只能通过这种折中方法达到目的\n\n      imageDatas.forEach(function (element, index) {\n        imageFigures.push(React.createElement(ImageFigure, {\n          data: element,\n          key: index,\n          id: \"imgFig\" + index,\n          setRef: _this3.setImgFigureEle,\n          arrange: imgArrangeArr[index],\n          styleRef: _this3[\"imgFig\" + index] && _this3[\"imgFig\" + index].style,\n          inverse: _this3.doInverse(index),\n          center: _this3.doCenter(index),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 286\n          },\n          __self: this\n        }));\n      });\n      return React.createElement(\"div\", {\n        className: styles[\"img-sec\"],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299\n        },\n        __self: this\n      }, imageFigures);\n    }\n  }]);\n\n  return ImageSection;\n}(Component);\n\nexport default ImageSection;","map":{"version":3,"sources":["/home/zhangyue/test/demo1/src/components/image-section/ImageSection.js"],"names":["React","Component","ImageFigure","styles","centerPos","left","top","hPosRange","leftSecX","rightSecX","secY","vPosRange","secX","topsecY","ImageSection","props","calcLayout","stageSize","imgSize","getImageSize","halfStageW","halfImgW","halfStageH","halfImgH","stageW","stageH","imgW","setImgFigureEle","para","element","imgFigDOM","scrollWidth","imgH","scrollHeight","Math","ceil","getRangeRandom","low","high","random","get30DegRandom","reArrange","centerIndex","imgArrangeArr","state","hPosRangeLeftSecX","hPosRangeRightSecX","hPosRangeSecY","vPosRangeSecX","vPosRangeTopSecY","imgArrangeTopArr","topImgNum","floor","topImgSpliceIndex","imgArrangeCenterArr","splice","pos","rotate","isCenter","isInverse","length","forEach","value","index","i","j","k","hPosRangeLORX","setState","doCenter","handleClick","name","clickIndex","doInverse","tempImgArrangeArr","imgInfo","Object","assign","imageDatas","map","Promise","all","fileName","then","fullName","imageURL","default","imageDatasArr","nextProps","clickInfo","preStageSize","preClickInfo","tempImgInfo","imageFigures","push","style"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport ImageFigure from \"./ImageFigure\";\n\nimport styles from './style/style.module.scss';\n\nlet centerPos = {\n    left: 0,\n    top: 0\n  },\n  hPosRange = {\n    leftSecX: [0, 0], //在舞台的左侧水平方向，图片的left的取值范围，leftSecX[0]是最左端，leftSecX[1]是最右端，初始都为0\n    rightSecX: [0, 0], //在舞台的右侧水平方向，图片的left的取值范围，rightSecX[0]是最左端，rightSecX[1]是最右端，初始都为0\n    secY: [0, 0] //在舞台左右两侧区域的垂直方向上，图片的top的取值范围，secY[0],是最上端，secY[1]是最下端，初始都为0\n  },\n  vPosRange = {\n    secX: [0, 0], //在舞台的中间上部区域，图片在水平方向上的left的取值范围\n    topsecY: [0, 0] //在舞台的中间上部区域，图片在垂直方向上的top的取值范围\n  };\n\nclass ImageSection extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      //存放图片的状态信息，包括图片位置,旋转角度,图片正反面,图片是否处于中心位置\n      imgArrangeArr: props.imageDatas.map((value, index) => {\n        return {\n          pos: {\n            left: 0,\n            top: 0\n          },\n          rotate: 0,\n          isInverse: false,\n          isCenter: false\n        };\n      }),\n      imageDatas: props.imageDatas\n    };\n    this.centerIndex = 0;\n  }\n\n  componentDidMount() {\n    const { imageDatas, stageSize } = this.props;\n    Promise.all(\n      imageDatas.map((value, index) => {\n        return import(\"../../images/\" + value.fileName).then(fullName => {\n          value.imageURL = fullName.default;\n          return value;\n        });\n      })\n    ).then(imageDatasArr => {\n      this.setState({\n        imageDatas: imageDatasArr\n      });\n    });\n\n    this.calcLayout(stageSize);\n    this.reArrange(this.centerIndex);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    let { stageSize, clickInfo } = nextProps;\n    let preStageSize = this.props.stageSize,\n      preClickInfo = this.props.clickInfo;\n      let { imgArrangeArr } = this.state;\n\n    if (\n      preStageSize.stageH !== stageSize.stageH ||\n      preStageSize.stageW !== stageSize.stageW\n    ) {\n      \n      this.calcLayout(stageSize);\n\n      //这种情况下，处于中心位置位置的图片状态保持不变\n      let tempImgInfo = Object.assign({}, imgArrangeArr[clickInfo.clickIndex]);\n      this.reArrange(this.centerIndex);\n      imgArrangeArr[clickInfo.clickIndex].isInverse = tempImgInfo.isInverse;\n      this.setState({\n        imgArrangeArr\n      });\n\n    }\n\n    //当点击中心图片以外的图片或者改变window的size时\n    if (clickInfo.name === \"center\") {\n      //仅当点击中心图片以外的图片\n      if (clickInfo.clickIndex !== preClickInfo.clickIndex) {\n        this.reArrange(clickInfo.clickIndex);\n      }\n    } else if (clickInfo.name === \"inverse\") {     //当点击中心图片进行翻转或者改变window的size时\n\n      //仅当点击中心图片进行翻转时\n      if (clickInfo.isInverse !== preClickInfo.isInverse) {\n\n        //this.doInverse(clickInfo.clickIndex);\n        let tempImgInfo = Object.assign({}, imgArrangeArr[clickInfo.clickIndex]);\n        imgArrangeArr[clickInfo.clickIndex].isInverse = !tempImgInfo.isInverse;\n        this.setState({\n          imgArrangeArr\n        });\n      }\n    }\n  }\n\n  //计算布局\n  calcLayout = stageSize => {\n    //const stageSize = this.props.stageSize;\n    const imgSize = this.getImageSize();\n\n    //计算中心图片的位置点\n    centerPos = {\n      left: stageSize.halfStageW - imgSize.halfImgW,\n      top: stageSize.halfStageH - imgSize.halfImgH\n    };\n\n    //左侧区域left取值范围\n    hPosRange.leftSecX[0] = -imgSize.halfImgW;\n    hPosRange.leftSecX[1] = stageSize.halfStageW - imgSize.halfImgW * 3;\n\n    //右侧区域left取值范围\n    hPosRange.rightSecX[0] = stageSize.halfStageW + imgSize.halfImgW;\n    hPosRange.rightSecX[1] = stageSize.stageW - imgSize.halfImgW;\n\n    //左右侧区域的top取值范围\n    hPosRange.secY[0] = -imgSize.halfImgH;\n    hPosRange.secY[1] = stageSize.stageH - imgSize.halfImgH;\n\n    //中间上部区域的left取值范围\n    vPosRange.secX[0] = stageSize.halfStageW - imgSize.imgW;\n    vPosRange.secX[1] = stageSize.halfStageW;\n\n    //中间上部区域的top的取值范围\n    vPosRange.topsecY[0] = -imgSize.halfImgH;\n    vPosRange.topsecY[1] = stageSize.halfStageH - imgSize.halfImgH * 3;\n  };\n\n  //在此组件(父组件)中设置每个figure（子组件中原生的HTML标签）的ref\n  setImgFigureEle = (para, element) => {\n    this[para] = element;\n  };\n\n  //拿到imageFigure大小\n  getImageSize = () => {\n    let imgFigDOM = this[\"imgFig0\"];\n    let imgW = imgFigDOM.scrollWidth,\n      imgH = imgFigDOM.scrollHeight,\n      halfImgW = Math.ceil(imgW / 2),\n      halfImgH = Math.ceil(imgH / 2);\n\n    return {\n      imgW,\n      imgH,\n      halfImgW,\n      halfImgH\n    };\n  };\n\n  //获取区间内的一个随机值\n  getRangeRandom = (low, high) => {\n    return Math.ceil(Math.random() * (high - low) + low);\n  };\n\n  //获取图片的旋转角度，角度在正负30度之间\n  get30DegRandom = () => {\n    return (Math.random() > 0.5 ? \"\" : \"-\") + Math.ceil(Math.random() * 30);\n  };\n\n  //重新布局所有图片\n  /*\n  *para centerIndex指定居中哪个图片\n  */\n  reArrange = centerIndex => {\n    let imgArrangeArr = this.state.imgArrangeArr,\n      hPosRangeLeftSecX = hPosRange.leftSecX,\n      hPosRangeRightSecX = hPosRange.rightSecX,\n      hPosRangeSecY = hPosRange.secY,\n      vPosRangeSecX = vPosRange.secX,\n      vPosRangeTopSecY = vPosRange.topsecY,\n      //imgArrangeTopArr存放上部图片的信息\n      //topImgNum上部图片放0个或者1个\n      //topImgSpliceIndex被放到上方的图片的index\n      imgArrangeTopArr = [],\n      topImgNum = Math.floor(Math.random() * 2),\n      topImgSpliceIndex = 0,\n      //选取中心图片\n      imgArrangeCenterArr = imgArrangeArr.splice(centerIndex, 1);\n    this.centerIndex = centerIndex;\n\n    //居中centerIndex的图片不需要旋转,isCenter设为true\n    imgArrangeCenterArr[0].pos = centerPos;\n    imgArrangeCenterArr[0].rotate = 0;\n    imgArrangeCenterArr[0].isCenter = true;\n    imgArrangeCenterArr[0].isInverse = false;\n\n    //取出上部图片的状态信息\n    topImgSpliceIndex = Math.floor(Math.random() * imgArrangeArr.length);\n    imgArrangeTopArr = imgArrangeArr.splice(topImgSpliceIndex, topImgNum);\n\n    //布局上部的图片\n    imgArrangeTopArr.forEach((value, index) => {\n      imgArrangeTopArr[index].pos = {\n        left: this.getRangeRandom(vPosRangeSecX[0], vPosRangeSecX[1]),\n        top: this.getRangeRandom(vPosRangeTopSecY[0], vPosRangeTopSecY[1])\n      };\n      imgArrangeTopArr[index].rotate = this.get30DegRandom();\n      imgArrangeTopArr[index].isCenter = false;\n      imgArrangeTopArr[index].isInverse = false;\n    });\n\n    //布局左右两侧的图片\n    for (let i = 0, j = imgArrangeArr.length, k = j / 2; i < j; i++) {\n      let hPosRangeLORX = null;\n\n      //前半部分布局左边，右半部分布局右边\n      if (i < k) {\n        hPosRangeLORX = hPosRangeLeftSecX;\n      } else {\n        hPosRangeLORX = hPosRangeRightSecX;\n      }\n\n      imgArrangeArr[i].pos = {\n        top: this.getRangeRandom(hPosRangeSecY[0], hPosRangeSecY[1]),\n        left: this.getRangeRandom(hPosRangeLORX[0], hPosRangeLORX[1])\n      };\n      imgArrangeArr[i].rotate = this.get30DegRandom();\n      imgArrangeArr[i].isCenter = false;\n      imgArrangeArr[i].isInverse = false;\n    }\n\n    //将取出的中心图片和上部图片再重新插入到图片数组中\n    if (imgArrangeTopArr && imgArrangeTopArr[0]) {\n      imgArrangeArr.splice(topImgSpliceIndex, 0, imgArrangeTopArr[0]);\n    }\n\n    imgArrangeArr.splice(centerIndex, 0, imgArrangeCenterArr[0]);\n\n    this.setState({\n      imgArrangeArr\n    });\n  };\n\n  /**\n   * 利用reArrange函数，居中对应index的图片\n   * @param index 需要被居中的图片对应的图片信息数组中的index\n   * @return {Function}\n   */\n  doCenter = index => {\n    return () => {\n      this.props.handleClick({\n        name: 'center',\n        clickIndex: index,\n        isCenter: true,\n        isInverse: false,\n      });\n    };\n  };\n\n  /**\n   * 翻转图片\n   * @param index 将要执行inverse操作的存储在图片信息数组的index\n   * @return {Function} 这是一个函数，是真正的待被执行的函数\n   */\n\n  doInverse = index => {\n    return () => {\n      let tempImgArrangeArr = this.state.imgArrangeArr;\n      let imgInfo = Object.assign({}, tempImgArrangeArr[index]);\n\n      this.props.handleClick({\n        name: 'inverse',\n        clickIndex: index,\n        isCenter: true,\n        isInverse: !imgInfo.isInverse\n      });\n    };\n  };\n\n  render() {\n    const { imgArrangeArr } = this.state;\n    const { imageDatas } = this.props;\n    let imageFigures = [];\n\n    //styleRef是获得每个figure的style引用，因为浏览器不支持用js代码直接对style[transform]进行更改，只能通过这种折中方法达到目的\n    imageDatas.forEach((element, index) => {\n      imageFigures.push(\n        <ImageFigure\n          data={element}\n          key={index}\n          id={\"imgFig\" + index}\n          setRef={this.setImgFigureEle}\n          arrange={imgArrangeArr[index]}\n          styleRef={this[\"imgFig\" + index] && this[\"imgFig\" + index].style}\n          inverse={this.doInverse(index)}\n          center={this.doCenter(index)}\n        />\n      );\n    });\n\n    return <div className={styles[\"img-sec\"]}>{imageFigures}</div>;\n  }\n}\n\nexport default ImageSection;\n"]},"metadata":{},"sourceType":"module"}